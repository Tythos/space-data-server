// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { massType } from './massType';
export class PAYLOAD {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPAYLOAD(bb, obj) {
        return (obj || new PAYLOAD()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPAYLOAD(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PAYLOAD()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    OBJECT_ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OBJECT_NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    DEPLOYMENT_DATE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MANEUVERABLE() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    SIZE() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    MASS() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    MASS_TYPE() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : massType.DRY;
    }
    static startPAYLOAD(builder) {
        builder.startObject(7);
    }
    static addOBJECT_ID(builder, OBJECT_IDOffset) {
        builder.addFieldOffset(0, OBJECT_IDOffset, 0);
    }
    static addOBJECT_NAME(builder, OBJECT_NAMEOffset) {
        builder.addFieldOffset(1, OBJECT_NAMEOffset, 0);
    }
    static addDEPLOYMENT_DATE(builder, DEPLOYMENT_DATEOffset) {
        builder.addFieldOffset(2, DEPLOYMENT_DATEOffset, 0);
    }
    static addMANEUVERABLE(builder, MANEUVERABLE) {
        builder.addFieldInt8(3, +MANEUVERABLE, +false);
    }
    static addSIZE(builder, SIZE) {
        builder.addFieldFloat64(4, SIZE, 0.0);
    }
    static addMASS(builder, MASS) {
        builder.addFieldFloat64(5, MASS, 0.0);
    }
    static addMASS_TYPE(builder, MASS_TYPE) {
        builder.addFieldInt8(6, MASS_TYPE, massType.DRY);
    }
    static endPAYLOAD(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createPAYLOAD(builder, OBJECT_IDOffset, OBJECT_NAMEOffset, DEPLOYMENT_DATEOffset, MANEUVERABLE, SIZE, MASS, MASS_TYPE) {
        PAYLOAD.startPAYLOAD(builder);
        PAYLOAD.addOBJECT_ID(builder, OBJECT_IDOffset);
        PAYLOAD.addOBJECT_NAME(builder, OBJECT_NAMEOffset);
        PAYLOAD.addDEPLOYMENT_DATE(builder, DEPLOYMENT_DATEOffset);
        PAYLOAD.addMANEUVERABLE(builder, MANEUVERABLE);
        PAYLOAD.addSIZE(builder, SIZE);
        PAYLOAD.addMASS(builder, MASS);
        PAYLOAD.addMASS_TYPE(builder, MASS_TYPE);
        return PAYLOAD.endPAYLOAD(builder);
    }
    unpack() {
        return new PAYLOADT(this.OBJECT_ID(), this.OBJECT_NAME(), this.DEPLOYMENT_DATE(), this.MANEUVERABLE(), this.SIZE(), this.MASS(), this.MASS_TYPE());
    }
    unpackTo(_o) {
        _o.OBJECT_ID = this.OBJECT_ID();
        _o.OBJECT_NAME = this.OBJECT_NAME();
        _o.DEPLOYMENT_DATE = this.DEPLOYMENT_DATE();
        _o.MANEUVERABLE = this.MANEUVERABLE();
        _o.SIZE = this.SIZE();
        _o.MASS = this.MASS();
        _o.MASS_TYPE = this.MASS_TYPE();
    }
}
export class PAYLOADT {
    OBJECT_ID;
    OBJECT_NAME;
    DEPLOYMENT_DATE;
    MANEUVERABLE;
    SIZE;
    MASS;
    MASS_TYPE;
    constructor(OBJECT_ID = null, OBJECT_NAME = null, DEPLOYMENT_DATE = null, MANEUVERABLE = false, SIZE = 0.0, MASS = 0.0, MASS_TYPE = massType.DRY) {
        this.OBJECT_ID = OBJECT_ID;
        this.OBJECT_NAME = OBJECT_NAME;
        this.DEPLOYMENT_DATE = DEPLOYMENT_DATE;
        this.MANEUVERABLE = MANEUVERABLE;
        this.SIZE = SIZE;
        this.MASS = MASS;
        this.MASS_TYPE = MASS_TYPE;
    }
    pack(builder) {
        const OBJECT_ID = (this.OBJECT_ID !== null ? builder.createString(this.OBJECT_ID) : 0);
        const OBJECT_NAME = (this.OBJECT_NAME !== null ? builder.createString(this.OBJECT_NAME) : 0);
        const DEPLOYMENT_DATE = (this.DEPLOYMENT_DATE !== null ? builder.createString(this.DEPLOYMENT_DATE) : 0);
        return PAYLOAD.createPAYLOAD(builder, OBJECT_ID, OBJECT_NAME, DEPLOYMENT_DATE, this.MANEUVERABLE, this.SIZE, this.MASS, this.MASS_TYPE);
    }
}
