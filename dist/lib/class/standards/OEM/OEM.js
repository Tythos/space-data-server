// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { ephemerisDataBlock } from './ephemerisDataBlock.js';
export class OEM {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsOEM(bb, obj) {
        return (obj || new OEM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsOEM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new OEM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$OEM');
    }
    CCSDS_OEM_VERS() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    CREATION_DATE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ORIGINATOR(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    EPHEMERIS_DATA_BLOCK(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new ephemerisDataBlock()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    EPHEMERIS_DATA_BLOCK_Length() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startOEM(builder) {
        builder.startObject(4);
    }
    static add_CCSDS_OEM_VERS(builder, CCSDS_OEM_VERS) {
        builder.addFieldFloat64(0, CCSDS_OEM_VERS, 0.0);
    }
    static add_CREATION_DATE(builder, CREATION_DATEOffset) {
        builder.addFieldOffset(1, CREATION_DATEOffset, 0);
    }
    static add_ORIGINATOR(builder, ORIGINATOROffset) {
        builder.addFieldOffset(2, ORIGINATOROffset, 0);
    }
    static add_EPHEMERIS_DATA_BLOCK(builder, EPHEMERIS_DATA_BLOCKOffset) {
        builder.addFieldOffset(3, EPHEMERIS_DATA_BLOCKOffset, 0);
    }
    static create_EPHEMERIS_DATA_BLOCK_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_EPHEMERIS_DATA_BLOCK_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endOEM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishOEMBuffer(builder, offset) {
        builder.finish(offset, '$OEM');
    }
    static finishSizePrefixedOEMBuffer(builder, offset) {
        builder.finish(offset, '$OEM', true);
    }
    static createOEM(builder, CCSDS_OEM_VERS, CREATION_DATEOffset, ORIGINATOROffset, EPHEMERIS_DATA_BLOCKOffset) {
        OEM.startOEM(builder);
        OEM.add_CCSDS_OEM_VERS(builder, CCSDS_OEM_VERS);
        OEM.add_CREATION_DATE(builder, CREATION_DATEOffset);
        OEM.add_ORIGINATOR(builder, ORIGINATOROffset);
        OEM.add_EPHEMERIS_DATA_BLOCK(builder, EPHEMERIS_DATA_BLOCKOffset);
        return OEM.endOEM(builder);
    }
    unpack() {
        return new OEMT(this.CCSDS_OEM_VERS(), this.CREATION_DATE(), this.ORIGINATOR(), this.bb.createObjList(this.EPHEMERIS_DATA_BLOCK.bind(this), this.EPHEMERIS_DATA_BLOCK_Length()));
    }
    unpackTo(_o) {
        _o.CCSDS_OEM_VERS = this.CCSDS_OEM_VERS();
        _o.CREATION_DATE = this.CREATION_DATE();
        _o.ORIGINATOR = this.ORIGINATOR();
        _o.EPHEMERIS_DATA_BLOCK = this.bb.createObjList(this.EPHEMERIS_DATA_BLOCK.bind(this), this.EPHEMERIS_DATA_BLOCK_Length());
    }
}
export class OEMT {
    CCSDS_OEM_VERS;
    CREATION_DATE;
    ORIGINATOR;
    EPHEMERIS_DATA_BLOCK;
    constructor(CCSDS_OEM_VERS = 0.0, CREATION_DATE = null, ORIGINATOR = null, EPHEMERIS_DATA_BLOCK = []) {
        this.CCSDS_OEM_VERS = CCSDS_OEM_VERS;
        this.CREATION_DATE = CREATION_DATE;
        this.ORIGINATOR = ORIGINATOR;
        this.EPHEMERIS_DATA_BLOCK = EPHEMERIS_DATA_BLOCK;
    }
    pack(builder) {
        const CREATION_DATE = (this.CREATION_DATE !== null ? builder.createString(this.CREATION_DATE) : 0);
        const ORIGINATOR = (this.ORIGINATOR !== null ? builder.createString(this.ORIGINATOR) : 0);
        const EPHEMERIS_DATA_BLOCK = OEM.create_EPHEMERIS_DATA_BLOCK_Vector(builder, builder.createObjectOffsetList(this.EPHEMERIS_DATA_BLOCK));
        return OEM.createOEM(builder, this.CCSDS_OEM_VERS, CREATION_DATE, ORIGINATOR, EPHEMERIS_DATA_BLOCK);
    }
}
