// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { manCovRefFrame } from './manCovRefFrame';


export class maneuverParameters {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):maneuverParameters {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsmaneuverParameters(bb:flatbuffers.ByteBuffer, obj?:maneuverParameters):maneuverParameters {
  return (obj || new maneuverParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsmaneuverParameters(bb:flatbuffers.ByteBuffer, obj?:maneuverParameters):maneuverParameters {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new maneuverParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

MAN_EPOCH_IGNITION():string|null
MAN_EPOCH_IGNITION(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MAN_EPOCH_IGNITION(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

MAN_DURATION():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

MAN_DELTA_MASS():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

MAN_REF_FRAME():manCovRefFrame {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : manCovRefFrame.RSW;
}

MAN_DV_1():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

MAN_DV_2():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

MAN_DV_3():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startmaneuverParameters(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addMAN_EPOCH_IGNITION(builder:flatbuffers.Builder, MAN_EPOCH_IGNITIONOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, MAN_EPOCH_IGNITIONOffset, 0);
}

static addMAN_DURATION(builder:flatbuffers.Builder, MAN_DURATION:number) {
  builder.addFieldFloat64(1, MAN_DURATION, 0.0);
}

static addMAN_DELTA_MASS(builder:flatbuffers.Builder, MAN_DELTA_MASS:number) {
  builder.addFieldFloat64(2, MAN_DELTA_MASS, 0.0);
}

static addMAN_REF_FRAME(builder:flatbuffers.Builder, MAN_REF_FRAME:manCovRefFrame) {
  builder.addFieldInt8(3, MAN_REF_FRAME, manCovRefFrame.RSW);
}

static addMAN_DV_1(builder:flatbuffers.Builder, MAN_DV_1:number) {
  builder.addFieldFloat64(4, MAN_DV_1, 0.0);
}

static addMAN_DV_2(builder:flatbuffers.Builder, MAN_DV_2:number) {
  builder.addFieldFloat64(5, MAN_DV_2, 0.0);
}

static addMAN_DV_3(builder:flatbuffers.Builder, MAN_DV_3:number) {
  builder.addFieldFloat64(6, MAN_DV_3, 0.0);
}

static endmaneuverParameters(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createmaneuverParameters(builder:flatbuffers.Builder, MAN_EPOCH_IGNITIONOffset:flatbuffers.Offset, MAN_DURATION:number, MAN_DELTA_MASS:number, MAN_REF_FRAME:manCovRefFrame, MAN_DV_1:number, MAN_DV_2:number, MAN_DV_3:number):flatbuffers.Offset {
  maneuverParameters.startmaneuverParameters(builder);
  maneuverParameters.addMAN_EPOCH_IGNITION(builder, MAN_EPOCH_IGNITIONOffset);
  maneuverParameters.addMAN_DURATION(builder, MAN_DURATION);
  maneuverParameters.addMAN_DELTA_MASS(builder, MAN_DELTA_MASS);
  maneuverParameters.addMAN_REF_FRAME(builder, MAN_REF_FRAME);
  maneuverParameters.addMAN_DV_1(builder, MAN_DV_1);
  maneuverParameters.addMAN_DV_2(builder, MAN_DV_2);
  maneuverParameters.addMAN_DV_3(builder, MAN_DV_3);
  return maneuverParameters.endmaneuverParameters(builder);
}

unpack(): maneuverParametersT {
  return new maneuverParametersT(
    this.MAN_EPOCH_IGNITION(),
    this.MAN_DURATION(),
    this.MAN_DELTA_MASS(),
    this.MAN_REF_FRAME(),
    this.MAN_DV_1(),
    this.MAN_DV_2(),
    this.MAN_DV_3()
  );
}


unpackTo(_o: maneuverParametersT): void {
  _o.MAN_EPOCH_IGNITION = this.MAN_EPOCH_IGNITION();
  _o.MAN_DURATION = this.MAN_DURATION();
  _o.MAN_DELTA_MASS = this.MAN_DELTA_MASS();
  _o.MAN_REF_FRAME = this.MAN_REF_FRAME();
  _o.MAN_DV_1 = this.MAN_DV_1();
  _o.MAN_DV_2 = this.MAN_DV_2();
  _o.MAN_DV_3 = this.MAN_DV_3();
}
}

export class maneuverParametersT {
constructor(
  public MAN_EPOCH_IGNITION: string|Uint8Array|null = null,
  public MAN_DURATION: number = 0.0,
  public MAN_DELTA_MASS: number = 0.0,
  public MAN_REF_FRAME: manCovRefFrame = manCovRefFrame.RSW,
  public MAN_DV_1: number = 0.0,
  public MAN_DV_2: number = 0.0,
  public MAN_DV_3: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const MAN_EPOCH_IGNITION = (this.MAN_EPOCH_IGNITION !== null ? builder.createString(this.MAN_EPOCH_IGNITION!) : 0);

  return maneuverParameters.createmaneuverParameters(builder,
    MAN_EPOCH_IGNITION,
    this.MAN_DURATION,
    this.MAN_DELTA_MASS,
    this.MAN_REF_FRAME,
    this.MAN_DV_1,
    this.MAN_DV_2,
    this.MAN_DV_3
  );
}
}
