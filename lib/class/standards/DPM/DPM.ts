// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { PERSON, PERSONT } from './PERSON.js';


export class DPM implements flatbuffers.IUnpackableObject<DPMT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DPM {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDPM(bb:flatbuffers.ByteBuffer, obj?:DPM):DPM {
  return (obj || new DPM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDPM(bb:flatbuffers.ByteBuffer, obj?:DPM):DPM {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DPM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$DPM');
}

GUID():string|null
GUID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
GUID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

NAME():string|null
NAME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
NAME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

SAME_AS():string|null
SAME_AS(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SAME_AS(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

URL():string|null
URL(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
URL(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

DESCRIPTION():string|null
DESCRIPTION(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
DESCRIPTION(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

CONTACTS(index: number, obj?:PERSON):PERSON|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new PERSON()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

contactsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startDPM(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addGuid(builder:flatbuffers.Builder, GUIDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, GUIDOffset, 0);
}

static addName(builder:flatbuffers.Builder, NAMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, NAMEOffset, 0);
}

static addSameAs(builder:flatbuffers.Builder, SAME_ASOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, SAME_ASOffset, 0);
}

static addUrl(builder:flatbuffers.Builder, URLOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, URLOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, DESCRIPTIONOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, DESCRIPTIONOffset, 0);
}

static addContacts(builder:flatbuffers.Builder, CONTACTSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, CONTACTSOffset, 0);
}

static createContactsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startContactsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endDPM(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDPMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$DPM');
}

static finishSizePrefixedDPMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$DPM', true);
}

static createDPM(builder:flatbuffers.Builder, GUIDOffset:flatbuffers.Offset, NAMEOffset:flatbuffers.Offset, SAME_ASOffset:flatbuffers.Offset, URLOffset:flatbuffers.Offset, DESCRIPTIONOffset:flatbuffers.Offset, CONTACTSOffset:flatbuffers.Offset):flatbuffers.Offset {
  DPM.startDPM(builder);
  DPM.addGuid(builder, GUIDOffset);
  DPM.addName(builder, NAMEOffset);
  DPM.addSameAs(builder, SAME_ASOffset);
  DPM.addUrl(builder, URLOffset);
  DPM.addDescription(builder, DESCRIPTIONOffset);
  DPM.addContacts(builder, CONTACTSOffset);
  return DPM.endDPM(builder);
}

unpack(): DPMT {
  return new DPMT(
    this.GUID(),
    this.NAME(),
    this.SAME_AS(),
    this.URL(),
    this.DESCRIPTION(),
    this.bb!.createObjList<PERSON, PERSONT>(this.CONTACTS.bind(this), this.contactsLength())
  );
}


unpackTo(_o: DPMT): void {
  _o.GUID = this.GUID();
  _o.NAME = this.NAME();
  _o.SAME_AS = this.SAME_AS();
  _o.URL = this.URL();
  _o.DESCRIPTION = this.DESCRIPTION();
  _o.CONTACTS = this.bb!.createObjList<PERSON, PERSONT>(this.CONTACTS.bind(this), this.contactsLength());
}
}

export class DPMT implements flatbuffers.IGeneratedObject {
constructor(
  public GUID: string|Uint8Array|null = null,
  public NAME: string|Uint8Array|null = null,
  public SAME_AS: string|Uint8Array|null = null,
  public URL: string|Uint8Array|null = null,
  public DESCRIPTION: string|Uint8Array|null = null,
  public CONTACTS: (PERSONT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const GUID = (this.GUID !== null ? builder.createString(this.GUID!) : 0);
  const NAME = (this.NAME !== null ? builder.createString(this.NAME!) : 0);
  const SAME_AS = (this.SAME_AS !== null ? builder.createString(this.SAME_AS!) : 0);
  const URL = (this.URL !== null ? builder.createString(this.URL!) : 0);
  const DESCRIPTION = (this.DESCRIPTION !== null ? builder.createString(this.DESCRIPTION!) : 0);
  const CONTACTS = DPM.createContactsVector(builder, builder.createObjectOffsetList(this.CONTACTS));

  return DPM.createDPM(builder,
    GUID,
    NAME,
    SAME_AS,
    URL,
    DESCRIPTION,
    CONTACTS
  );
}
}
