// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { dataStatusCode } from './dataStatusCode';
import { massType } from './massType';
import { objectType } from './objectType';
import { opsStatusCode } from './opsStatusCode';
import { orbitType } from './orbitType';


export class SATCAT {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):SATCAT {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSATCAT(bb:flatbuffers.ByteBuffer, obj?:SATCAT):SATCAT {
  return (obj || new SATCAT()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSATCAT(bb:flatbuffers.ByteBuffer, obj?:SATCAT):SATCAT {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SATCAT()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$SAT');
}

OBJECT_NAME():string|null
OBJECT_NAME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OBJECT_NAME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

OBJECT_ID():string|null
OBJECT_ID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OBJECT_ID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

NORAD_CAT_ID():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

OBJECT_TYPE():objectType {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : objectType.UNKNOWN;
}

OPS_STATUS_CODE():opsStatusCode {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : opsStatusCode.UNKNOWN;
}

OWNER():string|null
OWNER(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OWNER(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

LAUNCH_DATE():string|null
LAUNCH_DATE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
LAUNCH_DATE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

LAUNCH_SITE():string|null
LAUNCH_SITE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
LAUNCH_SITE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

DECAY_DATE():string|null
DECAY_DATE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
DECAY_DATE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

PERIOD():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

INCLINATION():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

APOGEE():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

PERIGEE():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

RCS():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

DATA_STATUS_CODE():dataStatusCode {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : dataStatusCode.NO_CURRENT_ELEMENTS;
}

ORBIT_CENTER():string|null
ORBIT_CENTER(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ORBIT_CENTER(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

ORBIT_TYPE():orbitType {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : orbitType.ORBIT;
}

DEPLOYMENT_DATE():string|null
DEPLOYMENT_DATE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
DEPLOYMENT_DATE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

MANEUVERABLE():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

SIZE():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

MASS():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

MASS_TYPE():massType {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : massType.DRY;
}

static startSATCAT(builder:flatbuffers.Builder) {
  builder.startObject(22);
}

static addOBJECT_NAME(builder:flatbuffers.Builder, OBJECT_NAMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, OBJECT_NAMEOffset, 0);
}

static addOBJECT_ID(builder:flatbuffers.Builder, OBJECT_IDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, OBJECT_IDOffset, 0);
}

static addNORAD_CAT_ID(builder:flatbuffers.Builder, NORAD_CAT_ID:number) {
  builder.addFieldInt32(2, NORAD_CAT_ID, 0);
}

static addOBJECT_TYPE(builder:flatbuffers.Builder, OBJECT_TYPE:objectType) {
  builder.addFieldInt8(3, OBJECT_TYPE, objectType.UNKNOWN);
}

static addOPS_STATUS_CODE(builder:flatbuffers.Builder, OPS_STATUS_CODE:opsStatusCode) {
  builder.addFieldInt8(4, OPS_STATUS_CODE, opsStatusCode.UNKNOWN);
}

static addOWNER(builder:flatbuffers.Builder, OWNEROffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, OWNEROffset, 0);
}

static addLAUNCH_DATE(builder:flatbuffers.Builder, LAUNCH_DATEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, LAUNCH_DATEOffset, 0);
}

static addLAUNCH_SITE(builder:flatbuffers.Builder, LAUNCH_SITEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, LAUNCH_SITEOffset, 0);
}

static addDECAY_DATE(builder:flatbuffers.Builder, DECAY_DATEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, DECAY_DATEOffset, 0);
}

static addPERIOD(builder:flatbuffers.Builder, PERIOD:number) {
  builder.addFieldFloat64(9, PERIOD, 0.0);
}

static addINCLINATION(builder:flatbuffers.Builder, INCLINATION:number) {
  builder.addFieldFloat64(10, INCLINATION, 0.0);
}

static addAPOGEE(builder:flatbuffers.Builder, APOGEE:number) {
  builder.addFieldFloat64(11, APOGEE, 0.0);
}

static addPERIGEE(builder:flatbuffers.Builder, PERIGEE:number) {
  builder.addFieldFloat64(12, PERIGEE, 0.0);
}

static addRCS(builder:flatbuffers.Builder, RCS:number) {
  builder.addFieldFloat64(13, RCS, 0.0);
}

static addDATA_STATUS_CODE(builder:flatbuffers.Builder, DATA_STATUS_CODE:dataStatusCode) {
  builder.addFieldInt8(14, DATA_STATUS_CODE, dataStatusCode.NO_CURRENT_ELEMENTS);
}

static addORBIT_CENTER(builder:flatbuffers.Builder, ORBIT_CENTEROffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, ORBIT_CENTEROffset, 0);
}

static addORBIT_TYPE(builder:flatbuffers.Builder, ORBIT_TYPE:orbitType) {
  builder.addFieldInt8(16, ORBIT_TYPE, orbitType.ORBIT);
}

static addDEPLOYMENT_DATE(builder:flatbuffers.Builder, DEPLOYMENT_DATEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, DEPLOYMENT_DATEOffset, 0);
}

static addMANEUVERABLE(builder:flatbuffers.Builder, MANEUVERABLE:boolean) {
  builder.addFieldInt8(18, +MANEUVERABLE, +false);
}

static addSIZE(builder:flatbuffers.Builder, SIZE:number) {
  builder.addFieldFloat64(19, SIZE, 0.0);
}

static addMASS(builder:flatbuffers.Builder, MASS:number) {
  builder.addFieldFloat64(20, MASS, 0.0);
}

static addMASS_TYPE(builder:flatbuffers.Builder, MASS_TYPE:massType) {
  builder.addFieldInt8(21, MASS_TYPE, massType.DRY);
}

static endSATCAT(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSATCATBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$SAT');
}

static finishSizePrefixedSATCATBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$SAT', true);
}

static createSATCAT(builder:flatbuffers.Builder, OBJECT_NAMEOffset:flatbuffers.Offset, OBJECT_IDOffset:flatbuffers.Offset, NORAD_CAT_ID:number, OBJECT_TYPE:objectType, OPS_STATUS_CODE:opsStatusCode, OWNEROffset:flatbuffers.Offset, LAUNCH_DATEOffset:flatbuffers.Offset, LAUNCH_SITEOffset:flatbuffers.Offset, DECAY_DATEOffset:flatbuffers.Offset, PERIOD:number, INCLINATION:number, APOGEE:number, PERIGEE:number, RCS:number, DATA_STATUS_CODE:dataStatusCode, ORBIT_CENTEROffset:flatbuffers.Offset, ORBIT_TYPE:orbitType, DEPLOYMENT_DATEOffset:flatbuffers.Offset, MANEUVERABLE:boolean, SIZE:number, MASS:number, MASS_TYPE:massType):flatbuffers.Offset {
  SATCAT.startSATCAT(builder);
  SATCAT.addOBJECT_NAME(builder, OBJECT_NAMEOffset);
  SATCAT.addOBJECT_ID(builder, OBJECT_IDOffset);
  SATCAT.addNORAD_CAT_ID(builder, NORAD_CAT_ID);
  SATCAT.addOBJECT_TYPE(builder, OBJECT_TYPE);
  SATCAT.addOPS_STATUS_CODE(builder, OPS_STATUS_CODE);
  SATCAT.addOWNER(builder, OWNEROffset);
  SATCAT.addLAUNCH_DATE(builder, LAUNCH_DATEOffset);
  SATCAT.addLAUNCH_SITE(builder, LAUNCH_SITEOffset);
  SATCAT.addDECAY_DATE(builder, DECAY_DATEOffset);
  SATCAT.addPERIOD(builder, PERIOD);
  SATCAT.addINCLINATION(builder, INCLINATION);
  SATCAT.addAPOGEE(builder, APOGEE);
  SATCAT.addPERIGEE(builder, PERIGEE);
  SATCAT.addRCS(builder, RCS);
  SATCAT.addDATA_STATUS_CODE(builder, DATA_STATUS_CODE);
  SATCAT.addORBIT_CENTER(builder, ORBIT_CENTEROffset);
  SATCAT.addORBIT_TYPE(builder, ORBIT_TYPE);
  SATCAT.addDEPLOYMENT_DATE(builder, DEPLOYMENT_DATEOffset);
  SATCAT.addMANEUVERABLE(builder, MANEUVERABLE);
  SATCAT.addSIZE(builder, SIZE);
  SATCAT.addMASS(builder, MASS);
  SATCAT.addMASS_TYPE(builder, MASS_TYPE);
  return SATCAT.endSATCAT(builder);
}

unpack(): SATCATT {
  return new SATCATT(
    this.OBJECT_NAME(),
    this.OBJECT_ID(),
    this.NORAD_CAT_ID(),
    this.OBJECT_TYPE(),
    this.OPS_STATUS_CODE(),
    this.OWNER(),
    this.LAUNCH_DATE(),
    this.LAUNCH_SITE(),
    this.DECAY_DATE(),
    this.PERIOD(),
    this.INCLINATION(),
    this.APOGEE(),
    this.PERIGEE(),
    this.RCS(),
    this.DATA_STATUS_CODE(),
    this.ORBIT_CENTER(),
    this.ORBIT_TYPE(),
    this.DEPLOYMENT_DATE(),
    this.MANEUVERABLE(),
    this.SIZE(),
    this.MASS(),
    this.MASS_TYPE()
  );
}


unpackTo(_o: SATCATT): void {
  _o.OBJECT_NAME = this.OBJECT_NAME();
  _o.OBJECT_ID = this.OBJECT_ID();
  _o.NORAD_CAT_ID = this.NORAD_CAT_ID();
  _o.OBJECT_TYPE = this.OBJECT_TYPE();
  _o.OPS_STATUS_CODE = this.OPS_STATUS_CODE();
  _o.OWNER = this.OWNER();
  _o.LAUNCH_DATE = this.LAUNCH_DATE();
  _o.LAUNCH_SITE = this.LAUNCH_SITE();
  _o.DECAY_DATE = this.DECAY_DATE();
  _o.PERIOD = this.PERIOD();
  _o.INCLINATION = this.INCLINATION();
  _o.APOGEE = this.APOGEE();
  _o.PERIGEE = this.PERIGEE();
  _o.RCS = this.RCS();
  _o.DATA_STATUS_CODE = this.DATA_STATUS_CODE();
  _o.ORBIT_CENTER = this.ORBIT_CENTER();
  _o.ORBIT_TYPE = this.ORBIT_TYPE();
  _o.DEPLOYMENT_DATE = this.DEPLOYMENT_DATE();
  _o.MANEUVERABLE = this.MANEUVERABLE();
  _o.SIZE = this.SIZE();
  _o.MASS = this.MASS();
  _o.MASS_TYPE = this.MASS_TYPE();
}
}

export class SATCATT {
constructor(
  public OBJECT_NAME: string|Uint8Array|null = null,
  public OBJECT_ID: string|Uint8Array|null = null,
  public NORAD_CAT_ID: number = 0,
  public OBJECT_TYPE: objectType = objectType.UNKNOWN,
  public OPS_STATUS_CODE: opsStatusCode = opsStatusCode.UNKNOWN,
  public OWNER: string|Uint8Array|null = null,
  public LAUNCH_DATE: string|Uint8Array|null = null,
  public LAUNCH_SITE: string|Uint8Array|null = null,
  public DECAY_DATE: string|Uint8Array|null = null,
  public PERIOD: number = 0.0,
  public INCLINATION: number = 0.0,
  public APOGEE: number = 0.0,
  public PERIGEE: number = 0.0,
  public RCS: number = 0.0,
  public DATA_STATUS_CODE: dataStatusCode = dataStatusCode.NO_CURRENT_ELEMENTS,
  public ORBIT_CENTER: string|Uint8Array|null = null,
  public ORBIT_TYPE: orbitType = orbitType.ORBIT,
  public DEPLOYMENT_DATE: string|Uint8Array|null = null,
  public MANEUVERABLE: boolean = false,
  public SIZE: number = 0.0,
  public MASS: number = 0.0,
  public MASS_TYPE: massType = massType.DRY
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const OBJECT_NAME = (this.OBJECT_NAME !== null ? builder.createString(this.OBJECT_NAME!) : 0);
  const OBJECT_ID = (this.OBJECT_ID !== null ? builder.createString(this.OBJECT_ID!) : 0);
  const OWNER = (this.OWNER !== null ? builder.createString(this.OWNER!) : 0);
  const LAUNCH_DATE = (this.LAUNCH_DATE !== null ? builder.createString(this.LAUNCH_DATE!) : 0);
  const LAUNCH_SITE = (this.LAUNCH_SITE !== null ? builder.createString(this.LAUNCH_SITE!) : 0);
  const DECAY_DATE = (this.DECAY_DATE !== null ? builder.createString(this.DECAY_DATE!) : 0);
  const ORBIT_CENTER = (this.ORBIT_CENTER !== null ? builder.createString(this.ORBIT_CENTER!) : 0);
  const DEPLOYMENT_DATE = (this.DEPLOYMENT_DATE !== null ? builder.createString(this.DEPLOYMENT_DATE!) : 0);

  return SATCAT.createSATCAT(builder,
    OBJECT_NAME,
    OBJECT_ID,
    this.NORAD_CAT_ID,
    this.OBJECT_TYPE,
    this.OPS_STATUS_CODE,
    OWNER,
    LAUNCH_DATE,
    LAUNCH_SITE,
    DECAY_DATE,
    this.PERIOD,
    this.INCLINATION,
    this.APOGEE,
    this.PERIGEE,
    this.RCS,
    this.DATA_STATUS_CODE,
    ORBIT_CENTER,
    this.ORBIT_TYPE,
    DEPLOYMENT_DATE,
    this.MANEUVERABLE,
    this.SIZE,
    this.MASS,
    this.MASS_TYPE
  );
}
}
